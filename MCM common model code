%%层次分析法
%% 输入判断矩阵
clear;clc
disp('请输入判断矩阵A： ')
% A = input('判断矩阵A=')
A =[1 1 4 1/3 3;
 1 1 4 1/3 3;
 1/4 1/4 1 1/3 1/2;
 3 3 3 1 3;
 1/3 1/3 2 1/3 1]
% matlab矩阵有两种写法，可以直接写到一行:
% [1 1 4 1/3 3;1 1 4 1/3 3;1/4 1/4 1 1/3 1/2;3 3 3 1 3;1/3 1/3 2 1/3 1]
% 也可以写成多行:
[1 1 4 1/3 3;
 1 1 4 1/3 3;
 1/4 1/4 1 1/3 1/2;
 3 3 3 1 3;
 1/3 1/3 2 1/3 1]
% 两行之间以分号结尾（最后一行的分号可加可不加），同行元素之间以空格（或者逗号）分开。

%% 方法1：算术平均法求权重
% 第一步：将判断矩阵按照列归一化（每一个元素除以其所在列的和）
Sum_A = sum(A)

[n,n] = size(A)  % 也可以写成n = size(A,1)
% 因为我们的判断矩阵A是一个方阵，所以这里的r和c相同，我们可以就用同一个字母n表示
SUM_A = repmat(Sum_A,n,1)   %repeat matrix的缩写
% 另外一种替代的方法如下：
    SUM_A = [];
    for i = 1:n   %循环哦，这一行后面不能加冒号（和Python不同），这里表示循环n次
        SUM_A = [SUM_A; Sum_A]
    end
clc;A
SUM_A
Stand_A = A ./ SUM_A
% 这里我们直接将两个矩阵对应的元素相除即可

% 第二步：将归一化的各列相加(按行求和)
sum(Stand_A,2)

% 第三步：将相加后得到的向量中每个元素除以n即可得到权重向量
disp('算术平均法求权重的结果为：');
disp(sum(Stand_A,2) / n)
% 首先对标准化后的矩阵按照行求和，得到一个列向量
% 然后再将这个列向量的每个元素同时除以n即可（注意这里也可以用./哦）

%% 方法2：几何平均法求权重
% 第一步：将A的元素按照行相乘得到一个新的列向量
clc;A
Prduct_A = prod(A,2)
% prod函数和sum函数类似，一个用于乘，一个用于加  dim = 2 维度是行

% 第二步：将新的向量的每个分量开n次方
Prduct_n_A = Prduct_A .^ (1/n)
% 这里对每个元素进行乘方操作，因此要加.号哦。  ^符号表示乘方哦  这里是开n次方，所以我们等价求1/n次方

% 第三步：对该列向量进行归一化即可得到权重向量
% 将这个列向量中的每一个元素除以这一个向量的和即可
disp('几何平均法求权重的结果为：');
disp(Prduct_n_A ./ sum(Prduct_n_A))

%% 方法3：特征值法求权重
% 第一步：求出矩阵A的最大特征值以及其对应的特征向量
clc
[V,D] = eig(A)    %V是特征向量, D是由特征值构成的对角矩阵（除了对角线元素外，其余位置元素全为0）
Max_eig = max(max(D)) %也可以写成max(D(:))哦~
% 那么怎么找到最大特征值所在的位置了？ 需要用到find函数，它可以用来返回向量或者矩阵中不为0的元素的位置索引。
% 那么问题来了，我们要得到最大特征值的位置，就需要将包含所有特征值的这个对角矩阵D中，不等于最大特征值的位置全变为0
% 这时候可以用到矩阵与常数的大小判断运算
D == Max_eig
[r,c] = find(D == Max_eig , 1)
% 找到D中第一个与最大特征值相等的元素的位置，记录它的行和列。

% 第二步：对求出的特征向量进行归一化即可得到我们的权重
V(:,c)
disp('特征值法求权重的结果为：');
disp( V(:,c) ./ sum(V(:,c)) )
% 我们先根据上面找到的最大特征值的列数c找到对应的特征向量，然后再进行标准化。

%% 计算一致性比例CR
clc
CI = (Max_eig - n) / (n-1);
RI=[0 0 0.52 0.89 1.12 1.26 1.36 1.41 1.46 1.49 1.52 1.54 1.56 1.58 1.59];  %注意哦，这里的RI最多支持 n = 15
CR=CI/RI(n);
disp('一致性指标CI=');disp(CI);
disp('一致性比例CR=');disp(CR);
if CR<0.10
    disp('因为CR < 0.10，所以该判断矩阵A的一致性可以接受!');
else
    disp('注意：CR >= 0.10，因此该判断矩阵A需要进行修改!');
end
%%-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
%%TOPsis法
%%一致性检验
disp('请输入判断矩阵A： ');
A = input('判断矩阵A=');
[V,D] = eig(A);
Max_eig = max(max(D));%lamda_max
[n,n] = size(A);
 
CI = (Max_eig - n) / (n-1);
RI=[0 0 0.52 0.89 1.12 1.26 1.36 1.41 1.46 1.49 1.52 1.54 1.56 1.58 1.59];
CR=CI/RI(n);
disp('一致性指标CI=');disp(CI);
disp('一致性比例CR=');disp(CR);
 
if CR<0.10
    disp('因为CR < 0.10，所以该判断矩阵A的一致性可以接受!');
    else
    disp('注意：CR >= 0.10，因此该判断矩阵A需要进行修改!');
end

%%算术平均法求权重
disp('请输入判断矩阵A： ');
A = input('判断矩阵A=');
Sum_A = sum(A);
[n,n] = size(A)
SUM_A = repmat(Sum_A,n,1)
 
%按列进行归一化
Stand_A = A ./ SUM_A
disp('算术平均法求权重的结果为：');
 
%将归一化的矩阵按行求和并除以n
disp(sum(Stand_A,2) / n)

%%几何平均法求权重
disp('请输入判断矩阵A： ');
A = input('判断矩阵A=');
[n,n] = size(A);
 
%将A的元素按照行相乘得到一个新的列向量
Prduct_A = prod(A,2);
 
%将新的向量的每个分量开n次方
Prduct_n_A = Prduct_A .^ (1/n)
disp('几何平均法求权重的结果为：');
 
%对该列向量进行归一化即可得到权重向量
disp(Prduct_n_A ./ sum(Prduct_n_A))

%%特征值法求权重
disp('请输入判断矩阵A： ');
A = input('判断矩阵A=');
 
%求出矩阵A的最大特征值以及其对应的特征向量
[V,D] = eig(A);
Max_eig = max(max(D));%lamda_max
[r,c] = find(D == Max_eig , 1);
disp('特征值法求权重的结果为：');
 
%对求出的特征向量进行归一化即可得到我们的权重
disp( V(:,c) ./ sum(V(:,c)) );

%%特征值法求权重
disp('请输入判断矩阵A： ');
A = input('判断矩阵A=');
 
%求出矩阵A的最大特征值以及其对应的特征向量
[V,D] = eig(A);
Max_eig = max(max(D));%lamda_max
[r,c] = find(D == Max_eig , 1);
disp('特征值法求权重的结果为：');
 
%对求出的特征向量进行归一化即可得到我们的权重
disp( V(:,c) ./ sum(V(:,c)) );

TOPSIS.m:
load water_quality.mat
[n,m] = size(X);
Judge = input(['这' num2str(m) '个指标是否需要经过正向化处理，需要请输入1 ，不需要输入0：  ']);
 
if Judge == 1
    Position = input('请输入需要正向化处理的指标所在的列，例如第2、3、6三列需要处理，那么你需要输入[2,3,6]： '); 
    disp('请输入需要处理的这些列的指标类型（1：极小型， 2：中间型， 3：区间型） ')
    Type = input('例如：第2列是极小型，第3列是区间型，第6列是中间型，就输入[1,3,2]：  ');
    for i = 1 : size(Position,2)  
        X(:,Position(i)) = Positivization(X(:,Position(i)),Type(i),Position(i));
    end
    disp('正向化后的矩阵 X =  ')
    disp(X)
end
 
Z = X ./ repmat(sum(X.*X) .^ 0.5, n, 1);
disp('标准化矩阵 Z = ')
disp(Z)
 
D_P = sum([(Z - repmat(max(Z),n,1)) .^ 2 ],2) .^ 0.5;   % D+ 与最大值的距离向量
D_N = sum([(Z - repmat(min(Z),n,1)) .^ 2 ],2) .^ 0.5;   % D- 与最小值的距离向量
S = D_N ./ (D_P+D_N);    % 未归一化的得分
disp('最后的得分为：')
stand_S = S / sum(S)
[sorted_S,index] = sort(stand_S ,'descend')
 
Positivization.m:
function [posit_x] = Positivization(x,type,i)
    if type == 1  %极小型
        disp(['第' num2str(i) '列是极小型，正在正向化'] )
        posit_x = Min2Max(x);  %调用Min2Max函数来正向化
        disp(['第' num2str(i) '列极小型正向化处理完成'] )
        disp('~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~')
    elseif type == 2  %中间型
        disp(['第' num2str(i) '列是中间型'] )
        best = input('请输入最佳的那一个值： ');
        posit_x = Mid2Max(x,best);
        disp(['第' num2str(i) '列中间型正向化处理完成'] )
        disp('~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~')
    elseif type == 3  %区间型
        disp(['第' num2str(i) '列是区间型'] )
        a = input('请输入区间的下界： ');
        b = input('请输入区间的上界： '); 
        posit_x = Inter2Max(x,a,b);
        disp(['第' num2str(i) '列区间型正向化处理完成'] )
        disp('~~~~~~~~~~~~~~~~~~~~分界线~~~~~~~~~~~~~~~~~~~~')
    else
        disp('没有这种类型的指标，请检查Type向量中是否有除了1、2、3之外的其他值')
    end
end
Min2Max.m:
function [posit_x] = Min2Max(x)
    posit_x = max(x) - x;
     %posit_x = 1 ./ x;    %如果x全部都大于0，也可以这样正向化
end

Mid2Max.m:
function [posit_x] = Mid2Max(x,best)
    M = max(abs(x-best));
    posit_x = 1 - abs(x-best) / M;
end

Inter2Max.m:
function [posit_x] = Inter2Max(x,a,b)
    r_x = size(x,1);  % row of x 
    M = max([a-min(x),max(x)-b]);
    posit_x = zeros(r_x,1);   %zeros函数用法: zeros(3)  zeros(3,1)  ones(3)
    % 初始化posit_x全为0  初始化的目的是节省处理时间
    for i = 1: r_x
        if x(i) < a
           posit_x(i) = 1-(a-x(i))/M;
        elseif x(i) > b
           posit_x(i) = 1-(x(i)-b)/M;
        else
           posit_x(i) = 1;
        end
    end
end

%%插值法
week = [1:2:15];  
[n,m] = size(X);  
ylab = {'周数','轮虫','溶氧','COD','水温','PH值','盐度','透明度','总碱度','氯离子','透明度','生物量'};  
  
P=zeros(11,15);  
for i = 1:n  
    y = X(i,:);  
    new_x = 1:15;  
    p1 = pchip(week,y,new_x);  
    subplot(3,4,i);  
    plot(week,y,'bo',new_x,p1,'r+-');  
    axis([0,15,-inf,inf]);  
    ylabel(ylab{i+1});  
    P(i,:)=p1;  
end  
legend('原始数据','三次埃尔米特插值数据','Location','SouthEast');  
P = [1:15;P];

week = [1:2:15];  
[n,m] = size(X);  
ylab = {'周数','轮虫','溶氧','COD','水温','PH值','盐度','透明度','总碱度','氯离子','透明度','生物量'};  
 
P=zeros(11,15);  
for i = 1:n  
    y = X(i,:);  
    new_x = 1:15;  
    p1 = spline(week,y,new_x);  
    subplot(3,4,i);  
    plot(week,y,'bo',new_x,p1,'r+-');  
    axis([0,15,-inf,inf]);  
    ylabel(ylab{i+1});  
    P(i,:)=p1;  
end  
legend('原始数据','三次样条插值数据','Location','SouthEast');  
P = [1:15;P];
P_sub = P(:,2:2:15);
